{"version":3,"sources":["static/img/desktop-profile.jpg","static/img/mobile-profile.png","components/MsgBox/MsgBox.js","components/ContactBox/ContactItem.js","components/ContactBox/ContactBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledMsgBox","styled","div","MsgBox","props","className","landCopy","header","blurb","id","moreBlurb","ContactItem","href","link","icon","size","name","icons","faFilePdf","faLinkedin","faGithub","faEnvelope","ContactBox","contacts","key","map","contact","title","renderContactItems","contactList","App","landingCopy","src","DesktopProfile","alt","MobileProfile","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qvCAAAA,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,4C,gYCK3C,IAAMC,E,OAAeC,EAAOC,IAAV,KAgBHC,EAVA,SAACC,GACZ,OACI,kBAACJ,EAAD,CAAcK,UAAU,2BACpB,4BAAKD,EAAME,SAASC,QACpB,2BAAIH,EAAME,SAASE,OACnB,uBAAGC,GAAG,cAAcL,EAAME,SAASI,a,SCAhCC,EAZK,SAACP,GACjB,OACI,yBAAKC,UAAU,gBACX,uBAAGA,UAAU,OAAOO,KAAMR,EAAMS,MAC5B,kBAAC,IAAD,CAAiBR,UAAU,UAAUS,KAAMV,EAAMU,KAAMC,KAAK,OAC5D,kBAAC,IAAD,CAAiBV,UAAU,iBAAiBS,KAAMV,EAAMU,KAAMC,KAAK,QAEvE,2BAAG,gCAASX,EAAMY,S,2BCHxBC,EAAQ,CAACC,IAAWC,IAAYC,IAAUC,KAoBjCC,EAlBI,WAWf,OACI,yBAAKjB,UAAU,2BAXQ,SAACkB,EAAUN,GAClC,IAAIO,GAAO,EACX,OAAOD,EAASE,KAAI,SAACC,GAEjB,OADAF,GAAO,EAEH,kBAAC,EAAD,CAAaA,IAAKA,EAAKV,KAAMG,EAAMO,GAAMR,KAAMU,EAAQC,MAAOd,KAAMa,EAAQb,UAO/Ee,CAAmBC,EAAYN,SAAUN,K,sDCDvCa,MAbf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAQI,GAAG,kBAAkBH,SAAUyB,IACvC,yBAAKtB,GAAG,kBACN,kBAAC,EAAD,MACA,yBAAKJ,UAAU,sCAAsC2B,IAAKC,IAAgBC,IAAI,qDAC9E,yBAAK7B,UAAU,qCAAqC2B,IAAKG,IAAeD,IAAI,kDCJhEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d19f0e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/desktop-profile.11225e76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mobile-profile.c39ebe1c.png\";","import React from 'react';\r\n// import MsgBoxSVG from '../../static/img/msgbox.svg';\r\nimport styled from 'styled-components';\r\n\r\n// For Message Box SVG; Experimental:\r\nconst StyledMsgBox = styled.div`\r\n    // background-image: url('MsgBoxSVG');\r\n    // background-repeat: no-repeat;\r\n    // background-size: cover;\r\n`;\r\n\r\nconst MsgBox = (props) => {\r\n    return (\r\n        <StyledMsgBox className=\"content-box message-box\">\r\n            <h1>{props.landCopy.header}</h1>\r\n            <p>{props.landCopy.blurb}</p>\r\n            <p id=\"more-blurb\">{props.landCopy.moreBlurb}</p>\r\n        </StyledMsgBox>\r\n    );\r\n}\r\n\r\nexport default MsgBox;","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst ContactItem = (props) => {\r\n    return (\r\n        <div className=\"contact-item\">\r\n            <a className=\"icon\" href={props.link}>\r\n                <FontAwesomeIcon className=\"fa-icon\" icon={props.icon} size=\"4x\" />\r\n                <FontAwesomeIcon className=\"fa-icon-mobile\" icon={props.icon} size=\"3x\" />\r\n            </a>\r\n            <p><strong>{props.name}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactItem;","import React from \"react\";\r\nimport ContactItem from \"./ContactItem\";\r\nimport { faFilePdf, faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport contactList from \"../../static/copy/contact-links.json\";\r\n\r\n// Unfortunately you have to import the icons from the source code :(\r\nconst icons = [faFilePdf, faLinkedin, faGithub, faEnvelope];\r\n\r\nconst ContactBox = () => {\r\n    const renderContactItems = (contacts, icons) => {\r\n        let key = -1;\r\n        return contacts.map((contact) => {\r\n            key += 1;\r\n            return (\r\n                <ContactItem key={key} icon={icons[key]} name={contact.title} link={contact.link} />\r\n            );\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-box contact-box\">\r\n            {renderContactItems(contactList.contacts, icons)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactBox;","import React from 'react';\r\nimport MsgBox from './components/MsgBox/MsgBox';\r\nimport ContactBox from './components/ContactBox/ContactBox';\r\nimport './App.scss';\r\nimport landingCopy from './static/copy/landing-page.json';\r\n\r\nimport DesktopProfile from './static/img/desktop-profile.jpg';\r\nimport MobileProfile from './static/img/mobile-profile.png';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MsgBox id=\"landing-message\" landCopy={landingCopy} />\r\n      <div id=\"landing-bottom\">\r\n        <ContactBox />\r\n        <img className=\"content-box profile desktop-profile\" src={DesktopProfile} alt=\"Me pointing top-left to my introduction message.\" />\r\n        <img className=\"content-box profile mobile-profile\" src={MobileProfile} alt=\"Me pointing up to my introduction message.\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}